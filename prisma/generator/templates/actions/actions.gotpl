{{- /*gotype:github.com/steebchen/prisma-client-go/generator.Root*/ -}}

var countOutput = []builder.Output{
	{Name: "count"},
}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{ $name := $model.Name.GoLowerCase }}
	{{ $ns := (print $name "Actions") }}

	type {{ $ns }} struct {
		// client holds the prisma client
		client *PrismaClient
	}

	var {{ $name }}Output = []builder.Output{
		{{- range $i := $model.Fields }}
			{{- if $i.Kind.IncludeInStruct }}
				{Name: "{{ $i.Name }}"},
			{{- end }}
		{{- end }}
	}

	type {{ $model.Name.GoCase }}RelationWith interface {
		getQuery() builder.Query
		with()
		{{ $model.Name.GoLowerCase }}Relation()
	}

	type {{ $model.Name.GoCase }}WhereParam interface {
		field() builder.Field
		getQuery() builder.Query
		{{ $model.Name.GoLowerCase }}Model()
	}

	type {{ $name }}DefaultParam struct {
		data builder.Field
		query builder.Query
	}

	func (p {{ $name }}DefaultParam) field() builder.Field {
		return p.data
	}

	func (p {{ $name }}DefaultParam) getQuery() builder.Query {
		return p.query
	}

	func (p {{ $name }}DefaultParam) {{ $model.Name.GoLowerCase }}Model() {}

	type {{ $model.Name.GoCase }}OrderByParam interface {
		field() builder.Field
		getQuery() builder.Query
		{{ $model.Name.GoLowerCase }}Model()
	}

	type {{ $name }}OrderByParam struct {
		data builder.Field
		query builder.Query
	}

	func (p {{ $name }}OrderByParam) field() builder.Field {
		return p.data
	}

	func (p {{ $name }}OrderByParam) getQuery() builder.Query {
		return p.query
	}

	func (p {{ $name }}OrderByParam) {{ $model.Name.GoLowerCase }}Model() {}

	type {{ $model.Name.GoCase }}CursorParam interface {
		field() builder.Field
		getQuery() builder.Query
		{{ $model.Name.GoLowerCase }}Model()
		isCursor()
	}

	type {{ $name }}CursorParam struct {
		data builder.Field
		query builder.Query
	}

	func (p {{ $name }}CursorParam) field() builder.Field {
		return p.data
	}

	func (p {{ $name }}CursorParam) isCursor() {}

	func (p {{ $name }}CursorParam) getQuery() builder.Query {
		return p.query
	}

	func (p {{ $name }}CursorParam) {{ $model.Name.GoLowerCase }}Model() {}

	{{/* TODO remove getQuery() builder.Field from Unique input and create a separate input for that with variadic parameters */}}
	type {{ $model.Name.GoCase }}ParamUnique interface {
		field() builder.Field
		getQuery() builder.Query
		unique()
		{{ $model.Name.GoLowerCase }}Model()
	}

	type {{ $name }}ParamUnique struct {
		data builder.Field
		query builder.Query
	}

	func (p {{ $name }}ParamUnique) {{ $model.Name.GoLowerCase }}Model() {}

	func ({{ $name }}ParamUnique) unique() {}

	func (p {{ $name }}ParamUnique) field() builder.Field {
		return p.data
	}

	func (p {{ $name }}ParamUnique) getQuery() builder.Query {
		return p.query
	}

	type {{ $model.Name.GoCase }}EqualsWhereParam interface {
		field() builder.Field
		getQuery() builder.Query
		equals()
		{{ $model.Name.GoLowerCase }}Model()
	}

	type {{ $name }}EqualsParam struct {
		data builder.Field
		query builder.Query
	}

	func (p {{ $name }}EqualsParam) {{ $model.Name.GoLowerCase }}Model() {}

	func ({{ $name }}EqualsParam) equals() {}

	func (p {{ $name }}EqualsParam) field() builder.Field {
		return p.data
	}

	func (p {{ $name }}EqualsParam) getQuery() builder.Query {
		return p.query
	}

	type {{ $model.Name.GoCase }}EqualsUniqueWhereParam interface {
		field() builder.Field
		getQuery() builder.Query
		equals()
		unique()
		{{ $model.Name.GoLowerCase }}Model()
	}

	type {{ $name }}EqualsUniqueParam struct {
		data builder.Field
		query builder.Query
	}

	func (p {{ $name }}EqualsUniqueParam) {{ $model.Name.GoLowerCase }}Model() {}

	func ({{ $name }}EqualsUniqueParam) unique() {}
	func ({{ $name }}EqualsUniqueParam) equals() {}

	func (p {{ $name }}EqualsUniqueParam) field() builder.Field {
		return p.data
	}

	func (p {{ $name }}EqualsUniqueParam) getQuery() builder.Query {
		return p.query
	}

	type {{ $model.Name.GoCase }}SetParam interface {
		field() builder.Field
		settable()
		{{ $model.Name.GoLowerCase }}Model()
	}

	type {{ $name }}SetParam struct {
		data builder.Field
	}

	func ({{ $name }}SetParam) settable() {}

	func (p {{ $name }}SetParam) field() builder.Field {
		return p.data
	}

	func (p {{ $name }}SetParam) {{ $model.Name.GoLowerCase }}Model() {}

	{{ range $field := $model.Fields }}
		{{ $prefix := (print $name "WithPrisma" $field.Name.GoCase) }}

		type {{ $model.Name.GoCase }}WithPrisma{{ $field.Name.GoCase }}EqualsSetParam interface {
			field() builder.Field
			getQuery() builder.Query
			equals()
			{{ $model.Name.GoLowerCase }}Model()
			{{ $field.Name.GoLowerCase }}Field()
		}

		{{ range $action := $model.Actions }}
			type {{ $model.Name.GoCase }}WithPrisma{{ $field.Name.GoCase }}{{ if eq $action "Set" }}Set{{ else }}Where{{ end }}Param interface {
				field() builder.Field
				getQuery() builder.Query
				{{ $model.Name.GoLowerCase }}Model()
				{{ $field.Name.GoLowerCase }}Field()
			}

			type {{ $prefix }}{{ $action }}Param struct {
				data builder.Field
				query builder.Query
			}

			func (p {{ $prefix }}{{ $action }}Param) field() builder.Field {
				return p.data
			}

			func (p {{ $prefix }}{{ $action }}Param) getQuery() builder.Query {
				return p.query
			}

			func (p {{ $prefix }}{{ $action }}Param) {{ $model.Name.GoLowerCase }}Model() {}

			func (p {{ $prefix }}{{ $action }}Param) {{ $field.Name.GoLowerCase }}Field() {}
		{{ end }}

		func ({{ $prefix }}SetParam) settable() {}
		func ({{ $prefix }}EqualsParam) equals() {}

		type {{ $prefix }}EqualsUniqueParam struct {
			data builder.Field
			query builder.Query
		}

		func (p {{ $prefix }}EqualsUniqueParam) field() builder.Field {
			return p.data
		}

		func (p {{ $prefix }}EqualsUniqueParam) getQuery() builder.Query {
			return p.query
		}

		func (p {{ $prefix }}EqualsUniqueParam) {{ $model.Name.GoLowerCase }}Model() {}
		func (p {{ $prefix }}EqualsUniqueParam) {{ $field.Name.GoLowerCase }}Field() {}

		func ({{ $prefix }}EqualsUniqueParam) unique() {}
		func ({{ $prefix }}EqualsUniqueParam) equals() {}
	{{ end }}
{{ end }}
