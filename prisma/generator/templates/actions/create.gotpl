{{- /*gotype:github.com/steebchen/prisma-client-go/generator.Root*/ -}}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{ $name := $model.Name.GoLowerCase }}
	{{ $modelName := (print $model.Name.GoCase "Model") }}
	{{ $ns := (print $name "Actions") }}
	{{ $result := (print $name "Create" "One") }}

	// Creates a single {{ $name }}.
	func (r {{ $ns }}) CreateOne(
		{{ range $field := $model.Fields -}}
			{{- if $field.RequiredOnCreate $model.PrimaryKey -}}
				_{{ $field.Name.GoLowerCase }} {{ $model.Name.GoCase }}WithPrisma{{ $field.Name.GoCase }}SetParam,
			{{ end }}
		{{- end }}
		optional ...{{ $model.Name.GoCase }}SetParam,
	) {{ $result }} {
		var v {{ $result }}
		v.query = builder.NewQuery()
		v.query.Engine = r.client

		v.query.Operation = "mutation"
		v.query.Method = "createOne"
		v.query.Model = "{{ $model.Name.String }}"
		v.query.Outputs = {{ $name }}Output

		var fields []builder.Field

		{{ range $field := $model.Fields -}}
			{{- if $field.RequiredOnCreate $model.PrimaryKey -}}
				fields = append(fields, _{{ $field.Name.GoLowerCase }}.field())
			{{ end }}
		{{- end }}

		for _, q := range optional {
			fields = append(fields, q.field())
		}

		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "data",
			Fields: fields,
		})
		return v
	}

	func (r {{ $result }}) With(params ...{{ $model.Name.GoCase }}RelationWith) {{ $result }} {
		for _, q := range params {
			query := q.getQuery()
			r.query.Outputs = append(r.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		}

		return r
	}

	type {{ $result }} struct {
		query builder.Query
	}

	func (p {{ $result }}) ExtractQuery() builder.Query {
		return p.query
	}

	func (p {{ $result }}) {{ $model.Name.GoLowerCase }}Model() {}

	func (r {{ $result }}) Exec(ctx context.Context) (*{{ $modelName }}, error) {
		var v {{ $modelName }}
		if err := r.query.Exec(ctx, &v); err != nil {
			return nil, err
		}
		return &v, nil
	}

	func (r {{ $result }}) Tx() {{ $name }}UniqueTxResult {
		v := New{{ $name }}UniqueTxResult()
		v.query = r.query
		v.query.TxResult = make(chan []byte, 1)
		return v
	}
{{ end }}
